using System.Collections;
using Game.Scripts.Common.Enums.SlotableIdentifiers;
using Game.Scripts.Server.Parsing;
using Game.Scripts.Server.Structs;
using Game.Scripts.Tooling.Editor;
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;

namespace Game.Tests.PlayMode
{
    public class SlotableEditorTest
    {
        [UnityTest]
        public IEnumerator FirstSlotableCreationTest()
        {
            //Simulate the creation of a auto-filled list of slotables by the user of the slotable editor.
            var list = ScriptableObject.CreateInstance<SlotableInfoList>();
            list.jsonPath = "Assets/Game/Json/SlotableInfoTest.json";
            list.SyncEnums();

            //Simulate "write to json" button pressed.
            SlotableInfoEditor.ConvertToJson(list.jsonPath, list);
            
            //Simulate the creation of the slotables during runtime.
            var gameObject = new GameObject();
            var parser = gameObject.AddComponent<SlotableInfoJsonParser>();
            parser.pathToJson = "Assets/Game/Json/SlotableInfoTest.json";
            var firstAbility = parser.InstantiateAbility((SlotableAbility)1);
            var firstSkill = parser.InstantiateSkill((SlotableSkill)1);
            var firstItem = parser.InstantiateItem((SlotableItem)1);
            var firstEffect = parser.InstantiateEffect((SlotableEffect)1);
            
            //Check editor list was autogenerated properly
            Assert.AreEqual((SlotableAbility)1, list.slotableAbilityInfos[0].idEnum);
            Assert.AreEqual((SlotableSkill)1, list.slotableSkillInfos[0].idEnum);
            Assert.AreEqual((SlotableItem)1, list.slotableItemInfos[0].idEnum);
            Assert.AreEqual((SlotableEffect)1, list.slotableEffectInfos[0].idEnum);
            
            //Check slotables are generated properly from the list
            Assert.AreEqual((SlotableAbility)1, firstAbility.Ability);
            Assert.AreEqual((SlotableSkill)1, firstSkill.Skill);
            Assert.AreEqual((SlotableItem)1, firstItem.Item);
            Assert.AreEqual((SlotableEffect)1, firstEffect.Effect);

            yield return null;
        }
    }
}
